<%= @profile.email %>

<style type="text/css" media="all">
  body {
    background-color: purple;
  }

  .axis path, .axis line {
    fill: none;
    stroke: black;
    shape-rendering: crispEdges;
  }

  .axis text {
    font-family: sans-serif;
    font-size: 11px;
  }
</style>

<script src="http://d3js.org/d3.v2.js"></script>
<script>
  var data = []
  function getData() {
    data = <%= @profile.get24hourgraph.to_json.html_safe %>;
  }

  getData();

  /***** SVG setup ******/
  var width = 400,
  height = 400,
  padding = 20,
  barWidth = width/data.length;

  svg = d3.select("body").append("svg:svg")
  .attr("width", width)
  .attr("height", height);

  /****** X Axes/Scales *******/
  xScale = d3.scale.linear()
  .domain([0, data.length - 1])
  .range([0, width - padding * 2]);

  function hourLabel() {
    return d3.range(1, 25).map(function(d) {
      if (d < 12) { return d + " am"; }
      if (d > 12) { return d - 12 + " pm"; }
      if (d === 12) { return 12 + " pm"; }
      if (d === 24) { return 12 + " am"; }
    })
  }

  var xScaleOrdinal = d3.scale.ordinal();
  var xAxis = d3.svg.axis().scale(xScaleOrdinal).orient("bottom");

  /****** Y Axes/Scales *******/
  var drawYScale = function() {
    yScaleMax = d3.max(data, function(d) {
      return d.sent + d.received;
    });

    yScale = d3.scale.linear()
    .domain([0, yScaleMax])
    .range([0, height - padding * 2]);
  };

  drawYScale();

  /******* Data viz *******/
  svg.selectAll("rect")
  .data(data)
  .enter()
  .append("svg:rect")
  .attr("x", function(d, i) { return xScale(i); })
  .attr("width", barWidth - 5)
  .attr("y", height)
  .attr("height", 0)
  .transition()
  .duration(2000)
  .attr("y", function(d) { return height - yScale(d.sent); }) 
  .attr("height", function(d) { return yScale(d.sent); } )
  .attr("fill", "goldenrod");

  function redraw() {
    svg.selectAll("rect")
    .data(data)
    .transition()
    .duration(2000)
    .attr("y", function(d) { return height - yScale(d.sent); }) 
    .attr("height", function(d) { return yScale(d.sent); } );
  }

  svg.selectAll("something")
  .data(data)
  .enter()
  .append("svg:rect")
  .attr("x", function(d, i) { return xScale(i); })
  .attr("width", barWidth - 5)
  .attr("y", function(d) { return height - yScale(d.sent); })
  .attr("height", 0)
  .transition()
  .duration(2000)
  .attr("y", function(d) { return height - (yScale(d.sent) + yScale(d.received)); }) 
  .attr("height", function(d) { return yScale(d.received); } )
  .attr("fill", "teal")
  .attr("class", function(d, i) { return "received"; });

  function redraw2() {
    svg.selectAll("rect.received")
    .data(data)
    .transition()
    .duration(2000)
    .attr("y", function(d) { return height - (yScale(d.sent) + yScale(d.received)); }) 
    .attr("height", function(d) { return yScale(d.received); } );
  }

  setInterval(function() {
    data = [];
    getData();
    drawYScale();
    redraw();
    redraw2();
  }, 2000);
</script>
